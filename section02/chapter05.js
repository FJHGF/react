// 원시타입 vs 객체타입
// 값이 저장되거나 복사되는 과정이 다르기 때문

// 원시타입 : 값 자체로서 변수에 저장되고 복사된다.
// -> 원본값이 변하지 않음 > 불변값(메모리값 수정 없음)
// 객체타입 : 참조값(주소값)을 통해 변수에 저장되고 복사된다.
// -> 원본값이 변함 > 가변값(메모리값 수정 됌됌)

let p1 = 1;
let p2 = p1;
p2 = 2;

let o1 = { name: "박지성" };
let o2 = o1; // 얕은 복사 -> 객체의 참조값을 복사함 >원본 객체가 수정될 수 있음
// o2.name = "홍길동";
let o3 = { ...o1 }; // 새로운 객체가 됌 // 깊은 복사 -> 새로운 객체 생성 후 프로퍼티만 따로 복사 > 원본 객체가 수정될 일이 없어 안전함

// 객체간의 비교
// -> 참조값을 기준으로 이루어짐
console.log(o1 === o2); // true
console.log(o1 === o3); // false > 참조값이 다름
console.log(o2 === o3); // false > 참조값이 다름
console.log(JSON.stringify(o1) === JSON.stringify(o3)); // true // 객체를 문자열로 변환하여 비교 > 내장함수 이용
console.log(JSON.stringify(o1)); //{"name":"박지성"}

// 객체
// 함수, 객체
